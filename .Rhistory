# Monte Carlo Simulation for Confidence Interval Validity
set.seed(123) # Ensure reproducibility
# Parameters
n <- 30           # Sample size
mu <- 100         # True mean
sigma <- 15       # Standard deviation
num_simulations <- 1000 # Number of simulations
# Function to compute confidence intervals
simulate_ci <- function(n, mu, sigma) {
sample_data <- rnorm(n, mean = mu, sd = sigma)
sample_mean <- mean(sample_data)
sample_se <- sd(sample_data) / sqrt(n)
# 95% Confidence Interval
ci_lower <- sample_mean - 1.96 * sample_se
ci_upper <- sample_mean + 1.96 * sample_se
return(c(ci_lower, ci_upper))
}
# Run simulations
results <- replicate(num_simulations, simulate_ci(n, mu, sigma))
# Check if the true mean is within the confidence intervals
contain_mu <- (mu >= results[1, ]) & (mu <= results[2, ])
coverage_rate <- mean(contain_mu) # Proportion of intervals containing the true mean
# Output results
cat("Coverage rate:", coverage_rate, "\n")
# ====================================================================
# R CODE
# small scale simulation study to investigate impact of measurement error
# measurement error on (continuous) exposure and/or (continuous) confounding variable
# ====================================================================
# ====================================================================
# libraries:
library(Hmisc)
# ====================================================================
# R CODE
# small scale simulation study to investigate impact of measurement error
# measurement error on (continuous) exposure and/or (continuous) confounding variable
# ====================================================================
# ====================================================================
# libraries:
install.packages("Hmisc")
# ====================================================================
# R CODE
# small scale simulation study to investigate impact of measurement error
# measurement error on (continuous) exposure and/or (continuous) confounding variable
# ====================================================================
# ====================================================================
# libraries:
install.packages("Hmisc")
library(Hmisc)
library(mice)
library(mice)
library(tidyverse)
#setwd("")
# ====================================================================
# set working directory:
# setwd("")
# ====================================================================
# The data can be dowloaded in xpt form from https://wwwn.cdc.gov/nchs/nhanes/continuousnhanes/default.aspx?BeginYear=2015
# read data:
d1 <- sasxport.get("DEMO_I.xpt")
d3 <- sasxport.get("BMX_I.xpt")
d4 <- sasxport.get("GHB_I.xpt")
d5 <- sasxport.get("TCHOL_I.xpt")
d1.t <- subset(d1,select=c("seqn","riagendr","ridageyr"))
d2.t <- subset(d2,select=c("seqn","bpxsy1"))
d3.t <- subset(d3,select=c("seqn","bmxbmi"))
# ====================================================================
# R CODE
# small scale simulation study to investigate impact of measurement error
# measurement error on (continuous) exposure and/or (continuous) confounding variable
# ====================================================================
# ====================================================================
# libraries:
install.packages("haven")
# ====================================================================
# R CODE
# small scale simulation study to investigate impact of measurement error
# measurement error on (continuous) exposure and/or (continuous) confounding variable
# ====================================================================
# ====================================================================
# libraries:
install.packages("haven")
library(haven)
data <- read_xpt("C:\\Users\\giran\\OneDrive\\Dokumentumok\\UU MSBBSS\\Markup-course\\DEMO_L.xpt")
d1 <- sasxport.get("DEMO_I.xpt")
# Load datasets
d1 <- read_xpt("DEMO_I.xpt")
d2 <- read_xpt("BPX_I.xpt")
# Load datasets
d1 <- read_xpt("DEMO_I.xpt")
d2 <- read_xpt("BPX_I.xpt")
d3 <- read_xpt("BMX_I.xpt")
d4 <- read_xpt("GHB_I.xpt")
d5 <- read_xpt("TCHOL_I.xpt")
# Subset required columns
d1.t <- subset(d1, select = c("seqn", "riagendr", "ridageyr"))
# Subset required columns
d1.t <- subset(d1, select = c("seqn", "riagendr", "ridageyr"))
d1 <- sasxport.get("DEMO_I.xpt")
# Load datasets
d1 <- read_xpt("DEMO_I.xpt")
d2 <- read_xpt("BPX_I.xpt")
d3 <- read_xpt("BMX_I.xpt")
d4 <- read_xpt("GHB_I.xpt")
d5 <- read_xpt("TCHOL_I.xpt")
# Subset required columns
d1.t <- subset(d1, select = c("seqn", "riagendr", "ridageyr"))
# Subset required columns
# Adjust column selection based on actual column names
d1.t <- subset(d1, select = c("SEQN", "RIAGENDR", "RIDAGEYR"))
d2.t <- subset(d2, select = c("seqn", "bpxsy1"))
# Subset required columns
# Adjust column selection based on actual column names
d1.t <- subset(d1, select = c("SEQN", "RIAGENDR", "RIDAGEYR"))
d2.t <- subset(d2, select = c("SEQN", "BPXSY1"))
d3.t <- subset(d3, select = c("SEQN", "BMXBMI"))
d4.t <- subset_with_check(d4, c("SEQN", "LBXGH"))
# Subset required columns
# Adjust column selection based on actual column names
d1.t <- subset(d1, select = c("SEQN", "RIAGENDR", "RIDAGEYR"))
d2.t <- subset(d2, select = c("SEQN", "BPXSY1"))
d3.t <- subset(d3, select = c("SEQN", "BMXBMI"))
d4.t <- subset(d4, select = c("SEQN", "LBXGH"))
d5.t <- subset(d5, select = c("SEQN", "LBDTCSI"))
# Merge datasets
d <- merge(d1.t, d2.t, by = "seqn")
# Merge datasets
d <- merge(d1.t, d2.t, by = "SEQN")
# Merge datasets
d <- merge(d1.t, d2.t, by = "SEQN")
d <- merge(d, d3.t, by = "SEQN")
d <- merge(d, d4.t, by = "SEQN")
d <- merge(d, d5.t, by = "SEQN")
# ====================================================================
# rename variables:
# RIAGENDR - Gender
# RIDAGEYR - Age in years at screening
# BPXSY1 - Systolic: Blood pres (1st rdg) mm Hg
# BMXBMI - Body Mass Index (kg/m**2)
# LBDTCSI - Total Cholesterol (mmol/L)
# LBXGH - Glycohemoglobin (%)
d$age <- d$ridageyr
d$sex <- d$riagendr
d$bp <- d$bpxsy1
d$bmi <- d$bmxbmi
d$HbA1C <- d$lbxgh
d$chol <- d$lbdtcsi
d$age[d$age<18] <- NA
colnames(d)
# ====================================================================
# rename variables:
# RIAGENDR - Gender
# RIDAGEYR - Age in years at screening
# BPXSY1 - Systolic: Blood pres (1st rdg) mm Hg
# BMXBMI - Body Mass Index (kg/m**2)
# LBDTCSI - Total Cholesterol (mmol/L)
# LBXGH - Glycohemoglobin (%)
d$age <- d$ridageyr
d$age <- as.numeric(d$age)
d$age[d$age<18] <- NA
str(d$age)
str(d$age)
head(d1.t)  # Ensure `ridageyr` exists in `d1.t`
d <- merge(d1.t, d2.t, by = "seqn", all = TRUE)  # Ensure `all = TRUE` to retain all rows
d <- merge(d1.t, d2.t, by = "SEQN", all = TRUE)  # Ensure `all = TRUE` to retain all rows
head(d1.t)  # Ensure `ridageyr` exists in `d1.t`
str(d$age)
str(d1)
d$age <- d$ridageyr
str(d$age) # Should return a numeric structure, not NULL
# ====================================================================
# rename variables:
# RIAGENDR - Gender
# RIDAGEYR - Age in years at screening
# BPXSY1 - Systolic: Blood pres (1st rdg) mm Hg
# BMXBMI - Body Mass Index (kg/m**2)
# LBDTCSI - Total Cholesterol (mmol/L)
# LBXGH - Glycohemoglobin (%)
d$age <- d$RIDAGEYR
str(d$age)
# ====================================================================
# rename variables:
# RIAGENDR - Gender
# RIDAGEYR - Age in years at screening
# BPXSY1 - Systolic: Blood pres (1st rdg) mm Hg
# BMXBMI - Body Mass Index (kg/m**2)
# LBDTCSI - Total Cholesterol (mmol/L)
# LBXGH - Glycohemoglobin (%)
d$age <- d$RIDAGEYR
d$sex <- d$RIAGENDR
d$bp <- d$BPXSY1
d$bmi <- d$BMXBMI
d$HbA1C <- d$LBXGH
d$chol <- d$LBDTCSI
d$age[d$age<18] <- NA
str(d$age)
colnames(d)
# ====================================================================
# select complete cases:
dc <- cc(subset(d,select=c("age","sex","bmi","HbA1C","bp")))
# ====================================================================
# rename variables:
# RIAGENDR - Gender
# RIDAGEYR - Age in years at screening
# BPXSY1 - Systolic: Blood pres (1st rdg) mm Hg
# BMXBMI - Body Mass Index (kg/m**2)
# LBDTCSI - Total Cholesterol (mmol/L)
# LBXGH - Glycohemoglobin (%)
d$age <- d$RIDAGEYR
d$sex <- d$RIAGENDR
d$bp <- d$BPXSY1
d$bmi <- d$BMXBMI
d$HbA1C <- d$LBXGH
d$chol <- d$LBDTCSI
d$age[d$age<18] <- NA
colnames(d)
# ====================================================================
# select complete cases:
dc <- cc(subset(d,select=c("age","sex","bmi","HbA1C","bp")))
d$bmi <- d$BMXBMI
colnames(d)
d3.t <- subset(d3, select = c("SEQN", "BMXBMI"))
d4.t <- subset(d4, select = c("SEQN", "LBXGH"))
d5.t <- subset(d5, select = c("SEQN", "LBDTCSI"))
# Merge datasets
d <- merge(d1.t, d2.t, by = "SEQN")
d <- merge(d, d3.t, by = "SEQN")
d <- merge(d, d4.t, by = "SEQN")
d <- merge(d, d5.t, by = "SEQN")
# ====================================================================
# rename variables:
# RIAGENDR - Gender
# RIDAGEYR - Age in years at screening
# BPXSY1 - Systolic: Blood pres (1st rdg) mm Hg
# BMXBMI - Body Mass Index (kg/m**2)
# LBDTCSI - Total Cholesterol (mmol/L)
# LBXGH - Glycohemoglobin (%)
d$age <- d$RIDAGEYR
d$sex <- d$RIAGENDR
d$bp <- d$BPXSY1
d$bmi <- d$BMXBMI
d$HbA1C <- d$LBXGH
d$chol <- d$LBDTCSI
d$age[d$age<18] <- NA
colnames(d)
# ====================================================================
# select complete cases:
dc <- cc(subset(d,select=c("age","sex","bmi","HbA1C","bp")))
# analysis:
summary(lm(bp ~ HbA1C + age + as.factor(sex), data=dc))
confint(lm(bp ~ HbA1C + age + as.factor(sex), data=dc))
summary(lm(bp ~ HbA1C + bmi + age + as.factor(sex), data=dc))
confint(lm(bp ~ HbA1C + bmi + age + as.factor(sex), data=dc))
# ====================================================================
# simulation of measurement error:
ref <- lm(bp ~ HbA1C + bmi + age + as.factor(sex), data=dc)$coef[2]
n.sim <- 1e3
perc.me.exp <- seq(0,.5,.1)
perc.me.conf<- seq(0,.5,.1)
scenarios <- expand.grid(perc.me.exp,perc.me.conf)
var.exp <- var(dc$HbA1C)
var.conf <- var(dc$bmi)
n <- dim(dc)[1]
beta.hat <- matrix(ncol=dim(scenarios)[1], nrow=n.sim)
for (k in 1:n.sim){
print(k)
set.seed(k)
for (i in 1:dim(scenarios)[1]){
var.me.exp <- var.exp*scenarios[i,1]/(1-scenarios[i,1])
var.me.conf <- var.conf*scenarios[i,2]/(1-scenarios[i,2])
dc$HbA1C.me <- dc$HbA1C + rnorm(dim(dc)[1], 0, sqrt(var.me.exp) )
dc$bmi.me <- dc$bmi + rnorm(dim(dc)[1], 0, sqrt(var.me.conf) )
beta.hat[k,i] <- lm(bp ~ HbA1C.me + age + bmi.me + as.factor(sex), data=dc)$coef[2]
}}
# ====================================================================
# simulation of measurement error:
ref <- lm(bp ~ HbA1C + bmi + age + as.factor(sex), data=dc)$coef[2]
n.sim <- 1e3
perc.me.exp <- seq(0,.5,.1)
perc.me.conf<- seq(0,.5,.1)
var.exp <- var(dc$HbA1C)
n <- dim(dc)[1]
beta.hat <- matrix(ncol=dim(scenarios)[1], nrow=n.sim)
for (k in 1:n.sim){
print(k)
set.seed(k)
for (i in 1:dim(scenarios)[1]){
var.me.exp <- var.exp*scenarios[i,1]/(1-scenarios[i,1])
var.me.conf <- var.conf*scenarios[i,2]/(1-scenarios[i,2])
dc$HbA1C.me <- dc$HbA1C + rnorm(dim(dc)[1], 0, sqrt(var.me.exp) )
dc$bmi.me <- dc$bmi + rnorm(dim(dc)[1], 0, sqrt(var.me.conf) )
beta.hat[k,i] <- lm(bp ~ HbA1C.me + age + bmi.me + as.factor(sex), data=dc)$coef[2]
}}
# ====================================================================
# simulation of measurement error:
ref <- lm(bp ~ HbA1C + bmi + age + as.factor(sex), data=dc)$coef[2]
perc.me.exp <- seq(0,.5,.1)
perc.me.conf<- seq(0,.5,.1)
var.exp <- var(dc$HbA1C)
var.conf <- var(dc$bmi)
n <- dim(dc)[1]
beta.hat <- matrix(ncol=dim(scenarios)[1], nrow=n.sim)
for (k in 1:n.sim){
print(k)
set.seed(k)
for (i in 1:dim(scenarios)[1]){
var.me.exp <- var.exp*scenarios[i,1]/(1-scenarios[i,1])
var.me.conf <- var.conf*scenarios[i,2]/(1-scenarios[i,2])
dc$HbA1C.me <- dc$HbA1C + rnorm(dim(dc)[1], 0, sqrt(var.me.exp) )
dc$bmi.me <- dc$bmi + rnorm(dim(dc)[1], 0, sqrt(var.me.conf) )
beta.hat[k,i] <- lm(bp ~ HbA1C.me + age + bmi.me + as.factor(sex), data=dc)$coef[2]
}}
install.packages("tinytex")
tinytex::install_tinytex()
pdflatex --version
pdflatex --version
pdflatex --version
pdflatex --version
install.packages("tinytex")
tinytex::install_tinytex()
y
Y
tinytex::install_tinytex()
tinytex::tlmgr_version()
quarto::quarto_render("Reproducible Manuscript for Simulation Study.qmd", output_format = "pdf")
